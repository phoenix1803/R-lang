1. Introduction to R Language
print("Welcome to R Programming!")
5 + 3  # Addition
8 - 2  # Subtraction
4 * 2  # Multiplication
9 / 3  # Division
print(result4)
result1 <- 5 + 3
result2 <- 8 - 2
result3 <- 4 * 2
result4 <- 9 / 3
# Equal-Length Vectors
vector1 <- c(10, 20, 30)
vector2 <- c(5, 15, 25)
add_equal <- vector1 + vector2          # Addition
sub_equal <- vector1 - vector2          # Subtraction
mul_equal <- vector1 * vector2          # Multiplication
div_equal <- vector1 / vector2          # Division
cat("Equal-Length Vectors Operations:\n")
cat("Addition: ", add_equal, "\n")
cat("Subtraction: ", sub_equal, "\n")
cat("Multiplication: ", mul_equal, "\n")
cat("Division: ", div_equal, "\n\n")
# Unequal-Length Vectors
vector3 <- c(10, 20, 30)
vector4 <- c(2, 4)
add_unequal <- vector3 + vector4        # Addition
sub_unequal <- vector3 - vector4        # Subtraction
mul_unequal <- vector3 * vector4        # Multiplication
div_unequal <- vector3 / vector4        # Division
cat("Unequal-Length Vectors Operations:\n")
cat("Addition: ", add_unequal, "\n")
cat("Subtraction: ", sub_unequal, "\n")
cat("Multiplication: ", mul_unequal, "\n")
cat("Division: ", div_unequal, "\n")
# Equal-Length Vectors
vector1 <- c(10, 20, 30)
vector2 <- c(5, 15, 25)
add_equal <- vector1 + vector2          # Addition
sub_equal <- vector1 - vector2          # Subtraction
mul_equal <- vector1 * vector2          # Multiplication
div_equal <- vector1 / vector2          # Division
cat("Equal-Length Vectors Operations:\n")
cat("Addition: ", add_equal, "\n")
cat("Subtraction: ", sub_equal, "\n")
cat("Multiplication: ", mul_equal, "\n")
cat("Division: ", div_equal, "\n\n")
# Unequal-Length Vectors
vector3 <- c(10, 20, 30)
vector4 <- c(2, 4)
add_unequal <- vector3 + vector4        # Addition
sub_unequal <- vector3 - vector4        # Subtraction
mul_unequal <- vector3 * vector4        # Multiplication
div_unequal <- vector3 / vector4        # Division
cat("Unequal-Length Vectors Operations:\n")
cat("Addition: ", add_unequal, "\n")
cat("Subtraction: ", sub_unequal, "\n")
cat("Multiplication: ", mul_unequal, "\n")
cat("Division: ", div_unequal, "\n")
# Equal-Length Vectors
vector1 <- c(10, 20, 30)
vector2 <- c(5, 15, 25)
add_equal <- vector1 + vector2          # Addition
sub_equal <- vector1 - vector2          # Subtraction
mul_equal <- vector1 * vector2          # Multiplication
div_equal <- vector1 / vector2          # Division
cat("Equal-Length Vectors Operations:\n")
cat("Addition: ", add_equal, "\n")
cat("Subtraction: ", sub_equal, "\n")
cat("Multiplication: ", mul_equal, "\n")
cat("Division: ", div_equal, "\n\n")
# Unequal-Length Vectors
vector3 <- c(10, 20, 30)
vector4 <- c(2, 4)
add_unequal <- vector3 + vector4        # Addition
sub_unequal <- vector3 - vector4        # Subtraction
mul_unequal <- vector3 * vector4        # Multiplication
div_unequal <- vector3 / vector4        # Division
cat("Unequal-Length Vectors Operations:\n")
cat("Addition: ", add_unequal, "\n")
cat("Subtraction: ", sub_unequal, "\n")
cat("Multiplication: ", mul_unequal, "\n")
cat("Division: ", div_unequal, "\n")
employee_data <- data.frame(
Employee_Code = c(101, 102, 103),
Employee_Name = c("Bhumika", "Lakho", "Anupriya"),
Salary = c(50000, 60000, 55000)
)
print("Original Data Frame:")
print(employee_data)
cat("\nClass of Data Frame:\n")
print(class(employee_data))
cat("\nStructure of Data Frame:\n")
print(str(employee_data))
cat("\nSummary of Data Frame:\n")
print(summary(employee_data))
cat("\nSecond Row:\n")
print(employee_data[2, ])
cat("\nEmployee Name Column:\n")
print(employee_data$Employee_Name)
new_row <- data.frame(Employee_Code = 104, Employee_Name = "David", Salary = 62000)
employee_data <- rbind(employee_data, new_row)
cat("\nData Frame after Adding a Row:\n")
print(employee_data)
employee_data$Department <- c("HR", "Finance", "IT", "Marketing")
cat("\nData Frame after Adding a Column:\n")
print(employee_data)
employee_data <- data.frame(
Employee_Code = c(101, 102, 103),
Employee_Name = c("Bhumika", "Lakho", "Anupriya"),
Salary = c(50000, 60000, 55000)
)
print("Original Data Frame:")
print(employee_data)
cat("\nClass of Data Frame:\n")
print(class(employee_data))
cat("\nStructure of Data Frame:\n")
print(str(employee_data))
cat("\nSummary of Data Frame:\n")
print(summary(employee_data))
cat("\nSecond Row:\n")
print(employee_data[2, ])
cat("\nEmployee Name Column:\n")
print(employee_data$Employee_Name)
new_row <- data.frame(Employee_Code = 104, Employee_Name = "Prakhar", Salary = 62000)
employee_data <- rbind(employee_data, new_row)
cat("\nData Frame after Adding a Row:\n")
print(employee_data)
employee_data$Department <- c("HR", "Finance", "IT", "Marketing")
cat("\nData Frame after Adding a Column:\n")
print(employee_data)
matrix1 <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)
matrix2 <- matrix(c(6, 5, 4, 3, 2, 1), nrow = 2, ncol = 3)
cat("Matrix 1:\n")
print(matrix1)
cat("\nMatrix 2:\n")
print(matrix2)
# Addition
cat("\nMatrix Addition:\n")
result_addition <- matrix1 + matrix2
print(result_addition)
# Subtraction
cat("\nMatrix Subtraction:\n")
result_subtraction <- matrix1 - matrix2
print(result_subtraction)
# Multiplication (element-wise)
cat("\nMatrix Element-wise Multiplication:\n")
result_multiplication <- matrix1 * matrix2
print(result_multiplication)
# Division (element-wise)
cat("\nMatrix Element-wise Division:\n")
result_division <- matrix1 / matrix2
print(result_division)
cat("\nScalar Multiplication (Matrix 1 * 2):\n")
result_scalar <- matrix1 * 2
print(result_scalar)
matrix3 <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2)
cat("\nMatrix Multiplication (Matrix 1 %*% Matrix 3):\n")
result_matrix_mult <- matrix1 %*% matrix3
print(result_matrix_mult)
View(matrix1)
View(matrix2)
View(matrix3)
compare_numbers <- function(num1, num2) {
if (num1 > num2) {
cat("The first number", num1, "is greater than the second number", num2, "\n")
} else if (num1 < num2) {
cat("The second number", num2, "is greater than the first number", num1, "\n")
} else {
cat("Both numbers are equal\n")
}
}
check_number <- function(num) {
if (num > 0) {
cat("The number", num, "is positive\n")
} else if (num < 0) {
cat("The number", num, "is negative\n")
} else {
cat("The number is zero\n")
}
}
fibonacci_series <- function(n) {
fib <- numeric(n)
fib[1] <- 0
fib[2] <- 1
for (i in 3:n) {
fib[i] <- fib[i - 1] + fib[i - 2]
}
cat("Fibonacci series (first", n, "elements):\n", fib, "\n")
}
fibonacci_while <- function(n) {
a <- 0
b <- 1
count <- 1
cat("Fibonacci series using while loop:\n")
while (count <= n) {
cat(a, " ")
temp <- a + b
a <- b
b <- temp
count <- count + 1
}
cat("\n")
}
repeat_example <- function(limit) {
count <- 1
repeat {
cat("Count:", count, "\n")
if (count >= limit) {
cat("Limit reached, breaking out of loop\n")
break
}
count <- count + 1
}
}
return_example <- function(x, y) {
sum <- x + y
return(sum)
}
skip_even_numbers <- function(n) {
cat("Odd numbers up to", n, ":\n")
for (i in 1:n) {
if (i %% 2 == 0) {
next
}
cat(i, " ")
}
cat("\n")
}
cat("Compare two numbers:\n")
compare_numbers(10, 20)
cat("\nCheck if a number is positive, negative, or zero:\n")
check_number(-5)
cat("\nPrint Fibonacci series (for loop):\n")
fibonacci_series(10)
cat("\nPrint Fibonacci series (while loop):\n")
fibonacci_while(10)
cat("\nDemonstrate repeat and break statement:\n")
repeat_example(5)
cat("\nDemonstrate return statement:\n")
sum_result <- return_example(15, 25)
cat("Sum returned by function:", sum_result, "\n")
cat("\nDemonstrate next statement:\n")
skip_even_numbers(10)
View(check_number)
# Sample data
sample_tab_data <- data.frame(
Name = c("Bhumika", "Lakho", "Anupriya", "Ishwarya", "Prakhar"),
Age = c(21, 22, 23, 24, 20),
Salary = c(40000, 50000, 60000, 45000, 48000)
)
# Write to a tab-separated file
write.table(sample_tab_data, "sample_tab.txt", sep = "\t", row.names = FALSE)
print("Sample tab-separated file 'sample_tab.txt' created.")
View(sample_tab_data)
View(sample_tab_data)
View(sample_tab_data)
View(sample_tab_data)
View(sample_tab_data)
View(sample_tab_data)
View(sample_tab_data)
View(sample_tab_data)
View(sample_tab_data)
View(sample_tab_data)
View(sample_tab_data)
setwd("~/R")
# Sample data
sample_tab_data <- data.frame(
Name = c("Bhumika", "Lakho", "Anupriya", "Ishwarya", "Prakhar"),
Age = c(21, 22, 23, 24, 20),
Salary = c(40000, 50000, 60000, 45000, 48000)
)
# Write to a tab-separated file
write.table(sample_tab_data, "sample_tab.txt", sep = "\t", row.names = FALSE)
print("Sample tab-separated file 'sample_tab.txt' created.")
# Sample data
sample_csv_data <- data.frame(
Name = c("Bhumika", "Lakho", "Anupriya", "Ishwarya", "Prakhar"),
Age = c(21, 22, 23, 24, 20),
Salary = c(40000, 50000, 60000, 45000, 48000)
)
# Write to a CSV file
write.csv(sample_csv_data, "sample.csv", row.names = FALSE)
print("Sample CSV file 'sample.csv' created.")
setwd("~/R")
# Sample data
sample_csv_data <- data.frame(
Name = c("Bhumika", "Lakho", "Anupriya", "Ishwarya", "Prakhar"),
Age = c(21, 22, 23, 24, 20),
Salary = c(40000, 50000, 60000, 45000, 48000)
)
# Write to a CSV file
write.csv(sample_csv_data, "sample.csv", row.names = FALSE)
print("Sample CSV file 'sample.csv' created.")
csv_data <- read.csv("sample.csv")
print("Imported CSV Data:")
print(csv_data)
tab_data <- read.table("sample_tab.txt", header = TRUE, sep = "\t")
print("Imported Tab-Separated Data:")
print(tab_data)
sample_data <- data.frame(
Name = c("A", "B", "C"),
Age = c(25, 30, 35),
Salary = c(50000, 60000, 70000)
)
write.csv(sample_data, "exported_data.csv", row.names = FALSE)
print("Data exported to 'exported_data.csv'")
write.table(sample_data, "exported_data_tab.txt", sep = "\t", row.names = FALSE)
print("Data exported to 'exported_data_tab.txt'")
View(csv_data)
View(sample_data)
barplot(BOD$demand,
names.arg = BOD$Time,
main = "Bar Chart of BOD Demand Over Time",
xlab = "Time",
ylab = "Demand",
col = "lightblue",
border = "black")
barplot(BOD$demand,
names.arg = BOD$Time,
main = "Bar Chart of BOD Demand Over Time",
xlab = "Time",
ylab = "Demand",
col = "lightblue",
border = "black")
hist(mtcars$mpg,
main = "Histogram of Miles Per Gallon (mpg)",
xlab = "Miles Per Gallon",
ylab = "Frequency",
col = "lightgreen",
border = "black",
breaks = 10)
barplot(BOD$demand,
names.arg = BOD$Time,
main = "Bar Chart of BOD Demand Over Time",
xlab = "Time",
ylab = "Demand",
col = "lightblue",
border = "black")
hist(mtcars$mpg,
main = "Histogram of Miles Per Gallon (mpg)",
xlab = "Miles Per Gallon",
ylab = "Frequency",
col = "lightgreen",
border = "black",
breaks = 10)
# Custom data for the pie chart
names <- c("Bhumika", "Lakho", "Anupriya", , "Prakhar")
barplot(BOD$demand,
names.arg = BOD$Time,
main = "Bar Chart of BOD Demand Over Time",
xlab = "Time",
ylab = "Demand",
col = "lightblue",
border = "black")
hist(mtcars$mpg,
main = "Histogram of Miles Per Gallon (mpg)",
xlab = "Miles Per Gallon",
ylab = "Frequency",
col = "lightgreen",
border = "black",
breaks = 10)
# Custom data for the pie chart
names <- c("Bhumika", "Lakho", "Anupriya","Prakhar")
salaries <- c(40000, 50000, 60000, 48000)
# Pie chart
pie(salaries,
labels = names,
main = "Pie Chart of Employee Salaries",
col = rainbow(length(salaries)))
barplot(BOD$demand,
names.arg = BOD$Time,
main = "Bar Chart of BOD Demand Over Time",
xlab = "Time",
ylab = "Demand",
col = "lightblue",
border = "black")
hist(mtcars$mpg,
main = "Histogram of Miles Per Gallon (mpg)",
xlab = "Miles Per Gallon",
ylab = "Frequency",
col = "lightgreen",
border = "black",
breaks = 10)
names <- c("Bhumika", "Lakho", "Anupriya","Prakhar")
salaries <- c(40000, 50000, 60000, 48000)
pie(salaries,
labels = names,
main = "Pie Chart of Employee Salaries",
col = rainbow(length(salaries)))
# Custom function to calculate factorial
factorial_function <- function(n) {
if (n == 0) {
return(1)
} else {
return(n * factorial_function(n - 1))
}
}
factorial_function(5)
# Custom function to find the maximum of two numbers
find_max <- function(a, b) {
if (a > b) {
return(a)
} else {
return(b)
}
}
find_max(10, 20)
# built in functions
numbers <- c(10, 20, 30, 40, 50)
mean_value <- mean(numbers)  # Output: 30
sd_value <- sd(numbers)      # Output: 15.81139
mean_value
sd_value
#installing and using packages from CRAN
install.packages("ggplot2")
library(ggplot2)
ggplot(data = mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue", size = 3) +
labs(title = "Scatter Plot of Horsepower vs MPG",
x = "Horsepower",
y = "Miles Per Gallon")
# Create a data frame with some missing values
data <- data.frame(
Name = c("Bhumika", "Prakhar", "Anu", "Lakho"),
Age = c(25, NA, 30, 22),
Salary = c(50000, 60000, NA, 45000)
)
print(data)
clean_data <- na.omit(data)
print(clean_data)
data$Age[is.na(data$Age)] <- mean(data$Age, na.rm = TRUE)
data$Salary[is.na(data$Salary)] <- median(data$Salary, na.rm = TRUE)
print(data)
data <- data.frame(
Age = c(25, 30, 35, 40),
Salary = c(50000, 60000, 55000, 65000)
)
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
data$Age <- normalize(data$Age)
data$Salary <- normalize(data$Salary)
print(data)
standardize <- function(x) {
return((x - mean(x)) / sd(x))
}
data$Age <- standardize(data$Age)
data$Salary <- standardize(data$Salary)
print(data)
data <- data.frame(
Name = c("John", "Sara", "Tom", "John"),
Age = c(25, 30, 30, 25),
Salary = c(50000, 60000, 60000, 50000)
)
print(data)
unique_data <- unique(data)
print(unique_data)
unique_data <- data[!duplicated(data$Name), ]
print(unique_data)
# Create a data frame with some missing values
data <- data.frame(
Name = c("Bhumika", "Prakhar", "Anu", "Lakho"),
Age = c(25, NA, 30, 22),
Salary = c(50000, 60000, NA, 45000)
)
print(data)
clean_data <- na.omit(data)
print(clean_data)
data$Age[is.na(data$Age)] <- mean(data$Age, na.rm = TRUE)
data$Salary[is.na(data$Salary)] <- median(data$Salary, na.rm = TRUE)
print(data)
data <- data.frame(
Age = c(25, 30, 35, 40),
Salary = c(50000, 60000, 55000, 65000)
)
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
data$Age <- normalize(data$Age)
data$Salary <- normalize(data$Salary)
print(data)
standardize <- function(x) {
return((x - mean(x)) / sd(x))
}
data$Age <- standardize(data$Age)
data$Salary <- standardize(data$Salary)
print(data)
data <- data.frame(
Name = c("John", "Sara", "Tom", "John"),
Age = c(25, 30, 30, 25),
Salary = c(50000, 60000, 60000, 50000)
)
print(data)
unique_data <- unique(data)
print(unique_data)
unique_data <- data[!duplicated(data$Name), ]
print(unique_data)
